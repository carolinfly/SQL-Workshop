# Replace; Ceil
SELECT CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0',''))) FROM EMPLOYEES; ---round up to the next integer.

Note: An aggregate may not appear in the WHERE clause unless it is in a subquery contained in a HAVING clause or a select list, 
and the column being aggregated is an outer reference.


# solution 1: MS SQL Server
with maxtable as
(select Employee_id, max(months*salary) as max
from Employee
where months*salary=(select max(months*salary) as max 
from Employee) 
group by employee_id)

select max, count(employee_id)
from maxtable
group by max

# solution 2:
select salary*months as earnings, count(*) from employee
group by earnings
order by earnings desc limit 1;

# solution 3:
select salary*months as earnings, count(*) from employee
group by 1 ---group by first column from SELECT 
order by 1 desc limit 1 ---print the first line

---oracle
select trunc(lat, 4)
from (select sum(lat_N) as lat
from station
where lat_N>38.7880 and lat_N<137.2345);

---MySQL
select round(long_w, 4)
from station 
where lat_n < 137.2345 
order by lat_n desc limit 1;

# Manhattan distance: abs(x1-x2) + abs(y1-y2)
select round((abs(min(lat_n)-max(lat_n)) + abs(min(long_w) - max(long_w))), 4)
from station

# Euclidean distance
select round(sqrt(power((min(lat_n)-max(lat_n)),2)+power(( min(long_w) - max(long_w)),2)),4)
from station;

## Find median --- MySQL does not have a rank function
# Solution 1:
SELECT round(lat_n,4)  
FROM 
(SELECT a1.ID, a1.lat_n, COUNT(a1.lat_n) Rank 
FROM station a1, station a2 
WHERE a1.lat_n < a2.lat_n OR (a1.lat_n=a2.lat_n AND a1.ID <= a2.ID) 
group by a1.ID, a1.lat_n
order by a1.lat_n desc) a3 
WHERE Rank = (SELECT (COUNT(*)+1) DIV 2 FROM station); 

# Solution 2:
Select round(S.LAT_N,4) mediam 
from station S 
where (select count(Lat_N) from station where Lat_N < S.LAT_N ) = (select count(Lat_N) from station where Lat_N > S.LAT_N)












